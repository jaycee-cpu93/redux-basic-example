{"ast":null,"code":"//import {createStore} from 'redux';\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// const counterReducer = (state =initialState, action) =>{\n//     if (action.type === \"increment\") {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"increase\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"decrement\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === \"toggle\") {\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// }\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initialState","counter","showCounter","counterSlice","name","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions"],"sources":["/Users/apple/Documents/dev/react/redux-example/src/store/index.js"],"sourcesContent":["//import {createStore} from 'redux';\nimport {createSlice, configureStore} from \"@reduxjs/toolkit\"\n\nconst initialState =  {counter: 0, showCounter: true}\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState,\n    reducers: {\n        increment(state) {\n            state.counter++\n        },\n        decrement(state){\n            state.counter--\n        },\n        increase(state, action){\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state){\n            state.showCounter = !state.showCounter;\n        },\n    }\n})\n\nconst initialAuthState = {\n    isAuthenticated: false\n}\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: initialAuthState,\n    reducers: {\n        login(state){\n            state.isAuthenticated = true;\n        },\n        logout(state){\n            state.isAuthenticated = false;\n        }\n    }\n\n})\n\n \n\n// const counterReducer = (state =initialState, action) =>{\n//     if (action.type === \"increment\") {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"increase\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n\n//     if (action.type === \"decrement\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === \"toggle\") {\n//         return{\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// }\n\nconst store = configureStore({\n    reducer: {counter: counterSlice.reducer, auth: authSlice.reducer}\n})\n\nexport const counterActions = counterSlice.actions\n\nexport default store"],"mappings":"AAAA;AACA,SAAQA,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AAE5D,MAAMC,YAAY,GAAI;EAACC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAErD,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MACbA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDO,SAASA,CAACD,KAAK,EAAC;MACZA,KAAK,CAACN,OAAO,EAAE;IACnB,CAAC;IACDQ,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAC;MACnBH,KAAK,CAACN,OAAO,GAAGM,KAAK,CAACN,OAAO,GAAGS,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAaA,CAACL,KAAK,EAAC;MAChBA,KAAK,CAACL,WAAW,GAAG,CAACK,KAAK,CAACL,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMW,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC1BM,IAAI,EAAE,gBAAgB;EACtBJ,YAAY,EAAEa,gBAAgB;EAC9BR,QAAQ,EAAE;IACNW,KAAKA,CAACT,KAAK,EAAC;MACRA,KAAK,CAACO,eAAe,GAAG,IAAI;IAChC,CAAC;IACDG,MAAMA,CAACV,KAAK,EAAC;MACTA,KAAK,CAACO,eAAe,GAAG,KAAK;IACjC;EACJ;AAEJ,CAAC,CAAC;;AAIF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,KAAK,GAAGnB,cAAc,CAAC;EACzBoB,OAAO,EAAE;IAAClB,OAAO,EAAEE,YAAY,CAACgB,OAAO;IAAEC,IAAI,EAAEL,SAAS,CAACI;EAAO;AACpE,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGlB,YAAY,CAACmB,OAAO;AAElD,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}